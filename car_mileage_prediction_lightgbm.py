# -*- coding: utf-8 -*-
"""LightGBM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oxvmx5YvCQlmPsEpct7-_DKHKQzqvgD_
"""

# Commented out IPython magic to ensure Python compatibility.
#numpy pandas
import numpy as np
import pandas as pd
#graph
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
#scikit-learn
from sklearn.model_selection import train_test_split

"""#データセット準備"""

path = "/content/drive/MyDrive/SIGNATEコンペ/自動車走行距離予測/"

train = pd.read_csv(path + "train.csv")
test = pd.read_csv(path + "test.csv")

"""#前処理"""

train.shape, test.shape

train.info()

test.info()

train["horsepower"].value_counts()

#horsepowerの？をNaNに変換
train["horsepower"] = train["horsepower"].replace("?", np.nan)
test["horsepower"] = test["horsepower"].replace("?", np.nan)

#NaNを中央値で補完
train["horsepower"] = train["horsepower"].fillna(train["horsepower"].median())
test["horsepower"] = test["horsepower"].fillna(test["horsepower"].median())

#int型に変換
train["horsepower"] = train["horsepower"].astype(int)
test["horsepower"] = test["horsepower"].astype(int)

train.info()

test.info()

#相関関係をヒートマップで可視化
train_corr = train[["cylinders", "displacement", "horsepower", "weight", "acceleration", "model year", "origin", "mpg"]].corr()

plt.figure(figsize=(10, 8))
sns.heatmap(train_corr.iloc[:20, :20], annot=True, vmax=1, vmin=-1)

#特徴量生成
#説明変数
x = train[["cylinders", "displacement", "horsepower", "acceleration", "model year", "origin"]]
#目的変数
y = train["mpg"]
#推論用の変数
z = test[["cylinders", "displacement", "horsepower", "acceleration", "model year", "origin"]]

#学習用データセットとテスト用データセットに分割（ホールドアウト法）
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

"""#モデル学習

**LightGBM**
"""

#LightGBMで学習
import lightgbm as lgb

#データセットをLightGBM用に変換
lgb_train = lgb.Dataset(x_train, y_train)
lgb_test = lgb.Dataset(x_test, y_test)

#パラメータの設定、また範囲を指定
params = {
    "objective":"regression",
    "metrics":"rmse",
    "boosting_type":"gbdt",
    "verbosity":-1,
    "learning_late":0.01,
    "max_depth":10,
    "num_leaves":20,
}

#モデル学習
model = lgb.train(
    params=params,
    train_set=lgb_train,
    valid_sets=[lgb_train, lgb_test],
    callbacks=[lgb.callback.log_evaluation(10)],
)

#検証
from sklearn.metrics import mean_squared_error

pred = model.predict(x_test, num_iteration=model.best_iteration)
rmse = mean_squared_error(y_test, pred, squared=False)
print(f"RMSE: {rmse}")

#特徴量の重要度を確認
lgb.plot_importance(model)
plt.show()

#推論
pred = model.predict(z)

output = pd.DataFrame({"id":test.id, "mpg":pred})

output.to_csv("lgb.csv", index=False, header=None)
