# -*- coding: utf-8 -*-
"""燃料消費量予測.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XsJyqhKiHaFCBmHqPXXQ9Qs9IzdBeK_f

**データセットの準備**
"""

# Commented out IPython magic to ensure Python compatibility.
#必要なライブラリをインポート
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split

# %matplotlib inline

#データセット
path = "/content/drive/MyDrive/SIGNATEコンペ/燃料消費量予測（回帰）/"

train = pd.read_csv(path + "train.tsv", sep="\t")
test = pd.read_csv(path + "test.tsv", sep="\t")
sample = pd.read_csv(path + "sample_submit.csv")

"""**前処理**"""

train.head()

#各データの行数、列数確認
train.shape, test.shape

train.info()

#horsepowerの？をnumpyのNaNに変換
train["horsepower"] = train["horsepower"].replace("?", np.nan)
test["horsepower"] = test["horsepower"].replace("?", np.nan)

#中央値（median）で置き換え
horsepower_median = train["horsepower"].median()
horsepower_med = test["horsepower"].median()
train["horsepower"] = train["horsepower"].fillna(horsepower_median)
test["horsepower"] = test["horsepower"].fillna(horsepower_med)

#数値型に変換
train["horsepower"] = train["horsepower"].astype(int)
test["horsepower"] = test["horsepower"].astype(int)

train.info()

test.info()

"""**特徴量エンジニアリング**"""

#特徴量を選別して、相関関係を可視化
train_corr = train[["cylinders", "displacement", "horsepower", "weight", "acceleration", "model year", "origin", "mpg"]].corr()

plt.figure(figsize=(10, 8))
sns.heatmap(train_corr.iloc[:20, :20], annot=True)

#説明変数
x = train[["displacement", "weight", "model year", "origin"]]
#目的変数
y = train["mpg"]
#推論用変数
x_test = test[["displacement", "weight", "model year", "origin"]]

#学習用データセットとテスト用データセットに分割
x_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.2, random_state=0)

"""**モデル学習、検証、推論**"""

#重回帰モデルで学習
from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(x_train, y_train)

#学習後のパラメータ（重み）
model.coef_

#パラメータを可視化
columns = ["displacement", "weight", "model year", "origin"]
plt.figure(figsize=(10, 7))
plt.bar(x=columns, height=model.coef_)

#バイアス確認
model.intercept_

#モデル検証
print(f"train score: {model.score(x_train, y_train)}")
print(f"val score: {model.score(x_val, y_val)}")

#モデル推論
pred = model.predict(x_test)

print(f"予測値: {pred[1]}")
print(f"実測値: {y[1]}")

#PLSの実装：多重共線性の解消
from sklearn.cross_decomposition import PLSRegression

pls = PLSRegression(n_components=4)
pls.fit(x_train, y_train)

#モデル検証
print(f"train score: {pls.score(x_train, y_train)}")
print(f"val score: {pls.score(x_val, y_val)}")

#提出用データセット作成
output = pd.DataFrame({"id":test.iloc[:, 0], "mpg":pred})
output["mpg"] = output["mpg"].astype(int)

output.to_csv("sample_submit.csv", header=None, index=False)

